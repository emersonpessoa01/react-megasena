{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emersonpessoa\\\\Documents\\\\GitHub\\\\igti-bootcamp-fullstack\\\\modulo03-React\\\\hooks\\\\react-megasena\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Form from \"./components/Form\";\nimport Numbers from \"./components/Numbers\";\nimport SixNumbers from \"./SixNumbers\"; //construindo array de 60 numeros\n\nconst getEmptyArray = () => {\n  const array = Array.from({\n    length: 60\n  }).map((_, index) => {\n    const id = index + 1;\n    const description = id.toString().padStart(2, \"0\"); //posicionado o zero a esquerda\n\n    return {\n      id,\n      description,\n      value: id,\n      count: 0\n    };\n  });\n  return array;\n}; //funcao que vai gera numero aleatorio entre 1 a 60\n\n\nconst generateNumber = (from = 1, to = 60) => {\n  return Math.max(from, Math.ceil(Math.random() * to)); // pega num de 0 a 1 e multiplica por 60 e arredonda pra cima\n}; //numbers: vetor de numeros de 1 a 60\n//pickedNumbers: 6 numeros sorteados;\n//isCalculating: booleano\n//limit: quantidade de sorteios p/ ser definido;\n\n\nexport default function App() {\n  //numbers,sixNumberSort,sixNumbersSort, isCalculating\n  const [numbers, setNumbers] = useState(getEmptyArray());\n  const [pickedNumbers, setPickedNumbers] = useState([]);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [limit, setLimit] = useState(1); // console.log(numbers)\n  // const handleLimitChange = (newLimit) =>{\n  //   setLimit(newLimit )\n  // }\n  //\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (pickedNumbers.length === 6) {\n        setIsCalculating(false);\n        return;\n      } //gerar um num aleatorio de 1 a 60\n\n\n      const newNumber = generateNUmber();\n      const newNumbers = [...numbers];\n      const newPickedNumbers = [...pickedNumbers];\n      const foundNumber = newNumbers.find(item => item.value === newNumber);\n      foundNumber.count++;\n\n      if (foundNumber.count === limit) {\n        newPickedNumbers.push(foundNumber.value);\n      }\n\n      setNumbers(newPickedNumbers);\n      setPickedNumbers(newPickedNumbers);\n    }, 4);\n    return () => clearInterval(interval);\n  }, [isCalculating]);\n\n  const handleLimitChange = event => {\n    const number = Number(event.target.value);\n    setLimit(number);\n  };\n\n  const handleInitSort = () => {\n    setNumbers(getEmptyArray());\n    setPickedNumbers([]);\n    setIsCalculating(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"React Megasena\"), /*#__PURE__*/React.createElement(Form, {\n    data: {\n      limit,\n      isCalculating\n    },\n    onLimitChange: handleLimitChange,\n    onButtonClick: handleInitSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Numbers, {\n    numbers: numbers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SixNumbers, {\n    numbers: pickedNumbers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/emersonpessoa/Documents/GitHub/igti-bootcamp-fullstack/modulo03-React/hooks/react-megasena/src/App.js"],"names":["React","useEffect","useState","Form","Numbers","SixNumbers","getEmptyArray","array","Array","from","length","map","_","index","id","description","toString","padStart","value","count","generateNumber","to","Math","max","ceil","random","App","numbers","setNumbers","pickedNumbers","setPickedNumbers","isCalculating","setIsCalculating","limit","setLimit","interval","setInterval","newNumber","generateNUmber","newNumbers","newPickedNumbers","foundNumber","find","item","push","clearInterval","handleLimitChange","event","number","Number","target","handleInitSort"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Form from \"./components/Form\";\nimport Numbers from \"./components/Numbers\";\nimport SixNumbers from \"./SixNumbers\";\n\n//construindo array de 60 numeros\nconst getEmptyArray = () => {\n  const array = Array.from({\n    length: 60,\n  }).map((_, index) => {\n    const id = index + 1;\n    const description = id.toString().padStart(2, \"0\"); //posicionado o zero a esquerda\n\n    return {\n      id,\n      description,\n      value: id,\n      count: 0,\n    };\n  });\n\n  return array;\n};\n\n//funcao que vai gera numero aleatorio entre 1 a 60\nconst generateNumber = (from = 1, to = 60) => {\n  return Math.max(from, Math.ceil(Math.random() * to)); // pega num de 0 a 1 e multiplica por 60 e arredonda pra cima\n};\n\n//numbers: vetor de numeros de 1 a 60\n//pickedNumbers: 6 numeros sorteados;\n//isCalculating: booleano\n//limit: quantidade de sorteios p/ ser definido;\nexport default function App() {\n  //numbers,sixNumberSort,sixNumbersSort, isCalculating\n  const [numbers, setNumbers] = useState(getEmptyArray());\n  const [pickedNumbers, setPickedNumbers] = useState([]);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [limit, setLimit] = useState(1);\n\n  // console.log(numbers)\n\n  // const handleLimitChange = (newLimit) =>{\n  //   setLimit(newLimit )\n  // }\n  //\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (pickedNumbers.length === 6) {\n        setIsCalculating(false);\n        return;\n      }\n      //gerar um num aleatorio de 1 a 60\n      const newNumber = generateNUmber();\n      const newNumbers = [...numbers];\n      const newPickedNumbers = [...pickedNumbers];\n\n      const foundNumber = newNumbers.find((item) => item.value === newNumber);\n      foundNumber.count++;\n\n      if (foundNumber.count === limit) {\n        newPickedNumbers.push(foundNumber.value);\n      }\n\n      setNumbers(newPickedNumbers);\n      setPickedNumbers(newPickedNumbers)\n\n\n    }, 4);\n    return () => clearInterval(interval);\n  }, [isCalculating]);\n\n  const handleLimitChange = (event) => {\n    const number = Number(event.target.value);\n    setLimit(number);\n  };\n\n  const handleInitSort = () => {\n    setNumbers(getEmptyArray());\n    setPickedNumbers([]);\n    setIsCalculating(true);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"center\">React Megasena</h1>\n\n      <Form\n        data={{ limit, isCalculating }}\n        onLimitChange={handleLimitChange}\n        onButtonClick={handleInitSort}\n      />\n      <Numbers numbers={numbers} />\n      <SixNumbers numbers={pickedNumbers} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}